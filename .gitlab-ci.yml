image: registry.gitlab.com/carpedalan/carpedalan-web/runner:latest


variables:
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2

stages:
  - build
  - test
  # - deploy

default:
  before_script:
    - pulumi login s3://carpedalan-pulumi
    - pulumi stack select dev

build client:
  image: docker:18.06.3
  before_script:
    - echo 'Skipping login'
  stage: build
  services:
    - docker:18.06.3-dind
  cache:
    key: client-cache
    paths:
      - client.tar
      - node12slim.tar
  artifacts: 
    expire_in: 1 week
    paths: 
      - client.tar
  script: 
    - ls -al
    - '[ ! -f ./node12slim.tar ] && docker pull node:12-slim && docker save node:12-slim > node12slim.tar'
    - '[ -f ./api.tar ] && docker load --input api.tar'
    - '[ -f ./node12slim.tar ] && docker load --input node12slim.tar'
    - docker build -t client:latest -f client/Dockerfile --cache-from client:latest --cache-from node:12-slim ./client
    - docker save client:latest > client.tar

build api:
  image: docker:18.06.3
  before_script:
    - echo 'Skipping login'
  stage: build
  services:
  - docker:18.06.3-dind
  cache:
    key: api-cache
    paths:
      - api.tar
      - node12alpine.tar
  artifacts: 
    expire_in: 1 week
    paths: 
      - api.tar
  script: 
    - ls -al
    - '[ ! -f ./node12alpine.tar ] && docker pull node:12-alpine && docker save node:12-alpine > node12alpine.tar'
    - '[ -f ./api.tar ] && docker load --input api.tar'
    - '[ -f ./node12alpine.tar ] && docker load --input node12alpine.tar'
    - docker build -t api:latest -f server/Dockerfile --cache-from api:latest --cache-from node:12-alpine . --target=dev
    - docker save api:latest > api.tar

build cypress:
  image: docker:18.06.3
  before_script:
    - echo 'Skipping login'
  stage: build
  services:
  - docker:18.06.3-dind
  cache:
    key: cypress-cache
    paths:
      - cypress.tar
      - cypressBase.tar
  artifacts: 
    expire_in: 1 week
    paths: 
      - cypress.tar
  script: 
    - ls -al
    - '[ -f ./cypress.tar ] && docker load --input cypress.tar'
    - '[ -f ./cypressBase.tar ] && docker load --input cypressBase.tar'
    - '[ ! -f ./cypressBase.tar ] && docker pull cypress/base:10 && docker save cypress/base:10 > cypressBase.tar'
    - docker build -t cypress:latest -f cypress/Dockerfile --cache-from cypress:latest ./cypress
    - docker save cypress:latest > cypress.tar

# dependencies:
#   before_script:
#     - echo 'Skipping login'
#   stage: build
#   artifacts:
#     expire_in: 1 week
#     paths:
#       - node_modules/
#       - client/node_modules
#       - server/node_modules
#   script:
#     - yarn

# build production:
#   services:
#     - docker:18.06.3-dind
#   script:
#     - ./scripts/pipeline/build.sh
#     - docker save $ECR:$CI_COMMIT_SHA > app.tar
#   stage: build
#   artifacts:
#     expire_in: 30 days
#     paths:
#       - app.tar

# build layer deps:
#   stage: build
#   services:
#     - docker:18.06.3-dind
#   script:
#     - cd imageResizer/layer
#     - yarn build
#   artifacts:
#     expire_in: 30 days
#     paths:
#       - imageResizer/layer/
  
e2e:
  stage: test
  before_script:
    - echo 'Skipping login'
  services:
    - docker:18.06.3-dind
  dependencies:
    - build client
    - build api
    - build cypress
  script: 
    # - yarn unit
    # - yarn integration
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker load --input api.tar
    - docker load --input client.tar
    - docker load --input cypress.tar
    - yarn e2e
integration:
  stage: test
  before_script:
    - echo 'Skipping login'
  services:
    - docker:18.06.3-dind
  dependencies:
    - build api
  script: 
    # - yarn unit
    # - yarn integration
    - docker load --input api.tar
    - yarn integration
unit:
  stage: test
  before_script:
    - echo 'Skipping login'
  services:
    - docker:18.06.3-dind
  dependencies:
    - build client
  script: 
    # - yarn unit
    # - yarn integration
    - docker load --input client.tar
    - yarn unit
# deploy:
#   stage: deploy
#   script:
#     - pulumi login s3://carpedalan-pulumi
#     - pulumi up --yes --no-interactive
#   dependencies:
#     - build layer deps